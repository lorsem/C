//Esempio di esercizio sull'utilizzo degli array
//Tris.c

//1 cerchio primo giocatore
//2 x secondo giocatore
//
//
#define DIM 3
#include <stdio.h>

//patta
int patta()
{
    printf("\nPATTA!\nVolete rigiocare?\n Digitare 1 per si, 0 per no.\n");
    int x;
    scanf("%i",&x);
    return x;
}
//funzione vittoria
int vittoria(int g)
{
    printf("\nGiocatore %i, HAI VINTO!!\n", g);
    printf("\nVolete rigiocare?\n Digitare 1 per si, 0 per no.\n");
    int x;
    scanf("%i",&x);
    return x;

}


int mostra_aggiornata_acv(int m[DIM][DIM])
{
    int i, j;
    printf("\n");
    for (i=0; i<DIM; i++) {
        for (j=0; j<DIM; j++) {
              printf("[ %i ]",m[i][j]);
        }
        printf("\n");
    }
    return 0;
}


int mostra_aggiornata(int m[DIM][DIM])
{
    int i, j;
    printf("\n");
    for (i=0; i<DIM; i++) {
        for (j=0; j<DIM; j++) {
            if (m[i][j]==1)
              printf("[ O ]");
            if (m[i][j]==2)
              printf("[ X ]");
            if (m[i][j]==8)
              printf("[   ]");

        }
        printf("\n");
    }
    return 0;
}
int inizializza(int m[DIM][DIM])
{
    int i, j;
    for (i=0; i<DIM; i++) {
        for (j=0; j<DIM; j++) {
            m[i][j]=8;
        }
    }
    return 0;
}

//controllo mossa
int controllocoord(int m[DIM][DIM],int x,int y)
{

    while (x<1 || x>3 ||y<1 || y>3 || m[x-1][y-1]==2 || m[x-1][y-1]==1)
    {
        printf("\nHai sbagliato coordinate, ritenta.\n");
        scanf("%d,%d",&x,&y);
    }
    int cod;
    cod=x*10+y;
    return cod;
}

//richiesta coordinate
int coordinate(int m[DIM][DIM])
{
    int x,y;
    printf("\nDove vuoi giocare? Dammi delle coordinate in forma x,y.\n");
    scanf("%d,%d",&x,&y);
    int cod=controllocoord(m,x,y);
    return cod;

}

//funzione decodifica x
int dex(int cod)
{
    int x;
    x=cod/10;
    return x;
}
//funzione decodifica y
int dey(int cod)
{
    int y;
    y=cod%10;
    return y;
}


//funzione di controllo totale
int controllatutto(int m[DIM][DIM],int g)
{
    int i, p;

    for (i=0;i<DIM;i++)
    {
        int c=0;
        int d=0;
        int r=0;
        int d2=0;
        //controllo 1 colonna
        for (p=0;p<DIM;p++)
        {
            if (m[p][i]==g)
                c++;
            //controllo 1 riga
            if (m[i][p]==g)
                r++;
            //controllo le diagonali
            if (i==0)
            {
                int j=DIM-1-p;
                if (m[p][p]==g)
                  d++;
                if(m[p][j]==g)
                  d2++;
            }
        }
        //controllo se vinto
        if (c==3 || d==3 || r==3 || d2==3 )
        {
            return g;
        }
    }
    return 0;
}

//mossa giocatore vivente
int mossav(int m[DIM][DIM],int g,int x, int y)
{
    m[x-1][y-1]=g;
    return 0;
}


//mossa base ai da poter ciclare
int mossab(int m[DIM][DIM],int g,int x, int y)
{
    mossav(m,g,x+1,y+1);
    return controllatutto(m,g);
}


// vede mosse possibili dell'avversario e salva su array come 1 se posizione perdente per ai.
int mossevincentiavv(int m[DIM][DIM],int g,int acv[DIM][DIM])
{   int avv=g%2+1;
    int k, l;
    for (k=0;k<DIM;k++)
    {
        for (l=0;l<DIM;l++)
        {
            if ( acv[k][l]==0)
            {
              int preb=m[k][l];
              if(mossab(m,avv,k,l)==avv)
              {
                acv[k][l]=1;
              }
              m[k][l]=preb;
            }
        }
    }
    return 0;
}


//array di controllo mosse possibili, i posti dove posso mettere mossa sono quelli con 0, quelli già usati, sono i 2, poi quelli dove vince l'altro saranno gli 1.
int arraymossepossibili(int m[DIM][DIM], int acv[DIM][DIM])
{
    int p,q;
    for (p=0;p<DIM;p++)
    {
        for (q=0;q<DIM;q++)
        {
            if (m[p][q]!=2 && m[p][q]!=1)
                acv[p][q]=0;
            else
              acv[p][q]=2;
        }
    }
    return 0;
}
//controlla se c'è una posizione vincente per l'avversario su array di controllo e gioca,
int controllaetappa(int m[DIM][DIM],int acv[DIM][DIM],int g)
{
    int o,n;
    for (o=0;o<DIM;o++)
    {
        for (n=0;n<DIM;n++)
        {
            if (acv[o][n]==1)
            {
                mossab(m,g,o,n);
                return 0;
            }
        }
    }
    return g;
}
int mospattare(int m[DIM][DIM],int g,int acv[DIM][DIM])
{
  int o,n;
    for (o=0;o<DIM;o++)
    {
        for (n=0;n<DIM;n++)
        {
            if (acv[o][n]==3)
            {
                mossab(m,g,o,n);
                return 0;
            }
        }
    }
    return 0;
}
//gioca per vincere avendo solo mosse possibili, prova tutte le possibilità, e le annulla, se una è vincente
//la tiene
int mosvincente(int m[DIM][DIM],int g,int acv[DIM][DIM])
{
  int i, j;
  for (i=0;i<DIM;i++)
  {
    for (j=0;j<DIM;j++)
    {
      if (acv[i][j]!=2)
      {
        int pre=m[i][j];
        if (mossab(m,g,i,j)==g)
        {
          return g;
        }
        else
          m[i][j]=pre;
      }
    }
  }
  return 0;
}
//mossa generica AI
int mossa(int m[DIM][DIM],int g)
{

    int i,j,h,acv[DIM][DIM];
    h=g%2+1;
    //array di controllo mosse possibili, i posti dove posso mettere mossa sono quelli con 0, quelli già usati, sono i 2, poi quelli dove vince l'altro saranno gli 1.
    arraymossepossibili(m,acv);
    // vede mosse possibili dell'avversario e salva su array come 1 se posizione perdente per ai.
    mossevincentiavv(m,g,acv);

    //gioca per vincere avendo solo mosse possibili, prova tutte le possibilità, e le annulla, se una è vincente
    //la tiene
    if (mosvincente(m,g,acv)==g)
    {
      return g;
    }
    //vede se può bloccare la mossa dell'avversario
    if (controllaetappa(m, acv, g)==g)
    {
      return g;
    }
    //gioca random
    else
    {
      int o,n;
      o=0;
      n=0;
      for (o=0;o<DIM;o++)
      {
        for (n=0;n<DIM;n++)
        {
          if (acv[o][n]==0)
          {
            mossab(m,g,o,n);
            printf("\nIl computer ha giocato nella casella %i,%i\n",o+1,n+1);
            return g;
          }
        }
      }
    }

    return 0;
}

int mosspossvittoria(int m[DIM][DIM],int g, int acv[DIM][DIM])
{
  int i, j;
  for(i=0;i<DIM;i++)
  {
    for (j=0;j<DIM;j++)
    {
      if (acv[i][j]==4)
      {
        mossab(m,g,i,j);
        return g;
      }
    }
  }
  return 0;
}

int mossaai5(int m[DIM][DIM],int g)
{
  int h=g%2+1;
  if (controllatutto(m,h)==h)
    return h;
  int i, j;
  for (i=0;i<DIM;i++)
  {
    for (j=0;j<DIM;j++)
    {
      if  (m[i][j]==8)
      {
        m[i][j]=g;
        if (mossaai5(m,h)==g)

          m[i][j]=8;
      }
    }
  }
  return 1;
}
int mossaai4(int m[DIM][DIM],int g, int v, int acv[DIM][DIM])
{
  int i,j,h,z,w,a_avv[DIM][DIM],acv_avv[DIM][DIM];
  v--;
  h=g%2+1;
  if (v==0)
    return 0;
  if (controllatutto(m,g)==g)
    return h;

  //arraymossepossibili(m,acv);

  //mossevincentiavv(m,g,acv);

  mostra_aggiornata_acv(acv);
  if (mosvincente(m,g,acv)==g)
  {
    return g;
  }
  else
    if (controllaetappa(m,acv,g)==0)
    {
      for (z=0;z<DIM;z++)
      {
        for (w=0;w<DIM;w++)
        {
          acv_avv[z][w]=acv[z][w];
          a_avv[z][w]=m[z][w];
        }
      }

      mossaai4(a_avv,h,v,acv_avv);
    }
    else
    {
      for (z=0;z<DIM;z++)
      {
        for (w=0;w<DIM;w++)
        {
          a_avv[z][w]=m[z][w];
          acv_avv[z][w]=acv[z][w];
        }
      }

      int o,n;
      for (o=0;o<DIM;o++)
      {
        for (n=0;n<DIM;n++)
        {
          if (acv[o][n]==0)
          {
            int preb=a_avv[o][n];
            a_avv[o][n]=g;
            int tc=mossaai4(a_avv,h,v,acv_avv);
            if (tc==h)
            {
              a_avv[o][n]=preb;
              acv_avv[o][n]=4;
            }
            if (tc==g)
            {

              acv_avv[o][n]=4;
            }
            if (tc==0)
            {
              a_avv[o][n]=preb;
            }
          }
        }
      }
    }
  return 0;

}

int mossaai3(int m[DIM][DIM], int g,int v)
{
  v--;
  if (controllatutto(m,g)==g)
  {
    return g;
  }

  if (v==0)
    return 0;
  int i,j,h,acv[DIM][DIM];
  h=g%2+1;
  //array di controllo mosse possibili, i posti dove posso mettere mossa sono quelli con 0, quelli già usati, sono i 2, poi quelli dove vince l'altro saranno gli 1 e 3 dove potrà vincere in due mosse.
  arraymossepossibili(m,acv);
  //gioca per vincere avendo solo mosse possibili, prova tutte le possibilità, e le annulla, se una è vincente
  //la tiene
  // vede mosse possibili dell'avversario e salva su array come 1 se posizione perdente per ai.
  mossevincentiavv(m,g,acv);
  mostra_aggiornata_acv(acv);
  if (mosvincente(m,g,acv)==g)
  {
    return g;
  }

  int o,n,z,w,a_avv[DIM][DIM];
  for (o=0;o<DIM;o++)
  {
    for (n=0;n<DIM;n++)
    {
      if (acv[o][n]!=2)
      {
        for (z=0;z<DIM;z++)
        {
          for (w=0;w<DIM;w++)
          {
            a_avv[z][w]=m[z][w];
          }
        }

        a_avv[o][n]=g;
        int tc=mossaai3(a_avv,h,v);
        if (tc==h)
        {
          acv[o][n]=4;
        }
        if (tc==g)
        {
          mossab(m,g,o,n);
          return g;
        }
        if (tc==0)
        {
          acv[o][n]=3;
        }
      }
    }
  }
  mospattare(m,g,acv);
  return 0;
}

int mossaai2(int m[DIM][DIM], int g)
{

  int i,j,h,acv[DIM][DIM];
  h=g%2+1;
  //array di controllo mosse possibili, i posti dove posso mettere mossa sono quelli con 0, quelli già usati, sono i 2, poi quelli dove vince l'altro saranno gli 1 e 3 dove potrà vincere in due mosse.
  arraymossepossibili(m,acv);
  // vede mosse possibili dell'avversario e salva su array come 1 se posizione perdente per ai.
  mossevincentiavv(m,g,acv);
  mostra_aggiornata_acv(acv);
  //gioca per vincere avendo solo mosse possibili, prova tutte le possibilità, e le annulla, se una è vincente
  //la tiene
  if (mosvincente(m,g,acv)==g)
  {
    return g;
  }
  //copia l'array del tris in un altro array e dallo al giocatore avversario, così da non dover ripristinare la sua mossa!!!
  //vede se può bloccare la mossa dell'avversario
  if (controllaetappa(m, acv, g)==g)
  {
    return g;
  }
  //gioca random
  else
  {
    int o,n,z,w,a_avv[DIM][DIM];
    for (o=0;o<DIM;o++)
    {
      for (n=0;n<DIM;n++)
      {

        if (acv[o][n]==0)
        {
          for (z=0;z<DIM;z++)
          {
            for (w=0;w<DIM;w++)
            {
              a_avv[z][w]=m[z][w];
            }
          }
          a_avv[o][n]=g;

          if (mossaai2(a_avv,h)==h)
          {
            mossab(m,g,o,n);
            return h;
          }
          a_avv[o][n]=0;

        }
      }
    }
  }


  return 0;

}

int main(int argc, const char *argv[])
{
  int gioco=0;
  do
  {
    int m[DIM][DIM],v=(DIM*DIM),giocatore=0,x,y;
    //inizializzo matrice e matrice di controllo
    printf("\n######### TRIS #########\n");
    if (v==(DIM*DIM))
    {
      inizializza(m);
    }
    //finchè ho mosse da fare che sono al massimo DIM*DIM
    printf("Che giocatore vuoi essere?\nDigita:\t 1 per cominciare per primo.\n      2 per cominciare per secondo.\n");
    scanf("%i", &giocatore);
    while (giocatore<1 || giocatore>2)
    {
      printf("Non hai immesso un valore valido! Riprova!\n");
      scanf("%i", &giocatore);
    }
    printf("Ok giocherai come giocatore numero %i",giocatore);

    while (v>=1)
    {
      mostra_aggiornata(m);
      printf("Giocatore %i, tocca a te!\n",giocatore);


      //mosse giocatore 2 che passa x e y dove mettere
      //controllo se giusta la mossa
      //controllo se ha vinto

      if (giocatore==1)
      {
        //richiedo coordinate
        int cod=coordinate(m);
        x=dex(cod);
        y=dey(cod);
        mossav(m,giocatore,x,y);
        //mossav(m,giocatore,x,y);
        //mosse giocatore 1 che passa x e y dove mettere
        //controllo se giusta la mossa

      }

      if (giocatore==2)
      {
        //int acv[DIM][DIM];
        //arraymossepossibili(m,acv);

        //mossevincentiavv(m,giocatore,acv);

        mossaai5(m,giocatore);
       // mossaai4(m,giocatore,v,acv);
        //mosse giocatore 2 che passa x e y dove mettere
      }
      //printf("\nQuesta è la situazione di gioco:\n\n[%i][%i][%i]\n[%i][%i][%i]\n[%i][%i][%i]\n", m[0][0], m[0][1], m[0][2], m[1][0], m[1][1], m[1][2], m[2][0], m[2][1], m[2][2]);
      v--;

      printf(" \n ----------------------------------------\n");
      if ( controllatutto(m,giocatore)==giocatore)
      {
        //hai vinto
        mostra_aggiornata(m);
        gioco=vittoria(giocatore);
      }

      giocatore=giocatore%2+1;
    }
    if (controllatutto(m,giocatore)==giocatore)
      gioco=vittoria(giocatore);
    else
      if (v==0)
        gioco=patta();
    //patta
    //
  }
  while (gioco==1);
  return 0;
}


